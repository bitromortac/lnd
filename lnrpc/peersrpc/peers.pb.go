// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.21.12
// source: peersrpc/peers.proto

package peersrpc

import (
	lnrpc "github.com/lightningnetwork/lnd/lnrpc"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// UpdateAction is used to determine the kind of action we are referring to.
type UpdateAction int32

const (
	// ADD indicates this is an "insertion" kind of action.
	UpdateAction_ADD UpdateAction = 0
	// REMOVE indicates this is a "deletion" kind of action.
	UpdateAction_REMOVE UpdateAction = 1
)

// Enum value maps for UpdateAction.
var (
	UpdateAction_name = map[int32]string{
		0: "ADD",
		1: "REMOVE",
	}
	UpdateAction_value = map[string]int32{
		"ADD":    0,
		"REMOVE": 1,
	}
)

func (x UpdateAction) Enum() *UpdateAction {
	p := new(UpdateAction)
	*p = x
	return p
}

func (x UpdateAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateAction) Descriptor() protoreflect.EnumDescriptor {
	return file_peersrpc_peers_proto_enumTypes[0].Descriptor()
}

func (UpdateAction) Type() protoreflect.EnumType {
	return &file_peersrpc_peers_proto_enumTypes[0]
}

func (x UpdateAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateAction.Descriptor instead.
func (UpdateAction) EnumDescriptor() ([]byte, []int) {
	return file_peersrpc_peers_proto_rawDescGZIP(), []int{0}
}

type FeatureSet int32

const (
	// SET_INIT identifies features that should be sent in an Init message to
	// a remote peer.
	FeatureSet_SET_INIT FeatureSet = 0
	// SET_LEGACY_GLOBAL identifies features that should be set in the legacy
	// GlobalFeatures field of an Init message, which maintains backwards
	// compatibility with nodes that haven't implemented flat features.
	FeatureSet_SET_LEGACY_GLOBAL FeatureSet = 1
	// SET_NODE_ANN identifies features that should be advertised on node
	// announcements.
	FeatureSet_SET_NODE_ANN FeatureSet = 2
	// SET_INVOICE identifies features that should be advertised on invoices
	// generated by the daemon.
	FeatureSet_SET_INVOICE FeatureSet = 3
	// SET_INVOICE_AMP identifies the features that should be advertised on
	// AMP invoices generated by the daemon.
	FeatureSet_SET_INVOICE_AMP FeatureSet = 4
)

// Enum value maps for FeatureSet.
var (
	FeatureSet_name = map[int32]string{
		0: "SET_INIT",
		1: "SET_LEGACY_GLOBAL",
		2: "SET_NODE_ANN",
		3: "SET_INVOICE",
		4: "SET_INVOICE_AMP",
	}
	FeatureSet_value = map[string]int32{
		"SET_INIT":          0,
		"SET_LEGACY_GLOBAL": 1,
		"SET_NODE_ANN":      2,
		"SET_INVOICE":       3,
		"SET_INVOICE_AMP":   4,
	}
)

func (x FeatureSet) Enum() *FeatureSet {
	p := new(FeatureSet)
	*p = x
	return p
}

func (x FeatureSet) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FeatureSet) Descriptor() protoreflect.EnumDescriptor {
	return file_peersrpc_peers_proto_enumTypes[1].Descriptor()
}

func (FeatureSet) Type() protoreflect.EnumType {
	return &file_peersrpc_peers_proto_enumTypes[1]
}

func (x FeatureSet) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FeatureSet.Descriptor instead.
func (FeatureSet) EnumDescriptor() ([]byte, []int) {
	return file_peersrpc_peers_proto_rawDescGZIP(), []int{1}
}

type UpdateAddressAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Determines the kind of action.
	Action UpdateAction `protobuf:"varint,1,opt,name=action,proto3,enum=peersrpc.UpdateAction" json:"action,omitempty"`
	// The address used to apply the update action.
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *UpdateAddressAction) Reset() {
	*x = UpdateAddressAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peersrpc_peers_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAddressAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAddressAction) ProtoMessage() {}

func (x *UpdateAddressAction) ProtoReflect() protoreflect.Message {
	mi := &file_peersrpc_peers_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAddressAction.ProtoReflect.Descriptor instead.
func (*UpdateAddressAction) Descriptor() ([]byte, []int) {
	return file_peersrpc_peers_proto_rawDescGZIP(), []int{0}
}

func (x *UpdateAddressAction) GetAction() UpdateAction {
	if x != nil {
		return x.Action
	}
	return UpdateAction_ADD
}

func (x *UpdateAddressAction) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type UpdateFeatureAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Determines the kind of action.
	Action UpdateAction `protobuf:"varint,1,opt,name=action,proto3,enum=peersrpc.UpdateAction" json:"action,omitempty"`
	// The feature bit used to apply the update action.
	FeatureBit lnrpc.FeatureBit `protobuf:"varint,2,opt,name=feature_bit,json=featureBit,proto3,enum=lnrpc.FeatureBit" json:"feature_bit,omitempty"`
}

func (x *UpdateFeatureAction) Reset() {
	*x = UpdateFeatureAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peersrpc_peers_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFeatureAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFeatureAction) ProtoMessage() {}

func (x *UpdateFeatureAction) ProtoReflect() protoreflect.Message {
	mi := &file_peersrpc_peers_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFeatureAction.ProtoReflect.Descriptor instead.
func (*UpdateFeatureAction) Descriptor() ([]byte, []int) {
	return file_peersrpc_peers_proto_rawDescGZIP(), []int{1}
}

func (x *UpdateFeatureAction) GetAction() UpdateAction {
	if x != nil {
		return x.Action
	}
	return UpdateAction_ADD
}

func (x *UpdateFeatureAction) GetFeatureBit() lnrpc.FeatureBit {
	if x != nil {
		return x.FeatureBit
	}
	return lnrpc.FeatureBit(0)
}

type NodeAnnouncementUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Set of changes for the features that the node supports.
	FeatureUpdates []*UpdateFeatureAction `protobuf:"bytes,1,rep,name=feature_updates,json=featureUpdates,proto3" json:"feature_updates,omitempty"`
	// Color is the node's color in hex code format.
	Color string `protobuf:"bytes,2,opt,name=color,proto3" json:"color,omitempty"`
	// Alias or nick name of the node.
	Alias string `protobuf:"bytes,3,opt,name=alias,proto3" json:"alias,omitempty"`
	// Set of changes for the node's known addresses.
	AddressUpdates []*UpdateAddressAction `protobuf:"bytes,4,rep,name=address_updates,json=addressUpdates,proto3" json:"address_updates,omitempty"`
}

func (x *NodeAnnouncementUpdateRequest) Reset() {
	*x = NodeAnnouncementUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peersrpc_peers_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeAnnouncementUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeAnnouncementUpdateRequest) ProtoMessage() {}

func (x *NodeAnnouncementUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_peersrpc_peers_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeAnnouncementUpdateRequest.ProtoReflect.Descriptor instead.
func (*NodeAnnouncementUpdateRequest) Descriptor() ([]byte, []int) {
	return file_peersrpc_peers_proto_rawDescGZIP(), []int{2}
}

func (x *NodeAnnouncementUpdateRequest) GetFeatureUpdates() []*UpdateFeatureAction {
	if x != nil {
		return x.FeatureUpdates
	}
	return nil
}

func (x *NodeAnnouncementUpdateRequest) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *NodeAnnouncementUpdateRequest) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *NodeAnnouncementUpdateRequest) GetAddressUpdates() []*UpdateAddressAction {
	if x != nil {
		return x.AddressUpdates
	}
	return nil
}

type NodeAnnouncementUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ops []*lnrpc.Op `protobuf:"bytes,1,rep,name=ops,proto3" json:"ops,omitempty"`
}

func (x *NodeAnnouncementUpdateResponse) Reset() {
	*x = NodeAnnouncementUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peersrpc_peers_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeAnnouncementUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeAnnouncementUpdateResponse) ProtoMessage() {}

func (x *NodeAnnouncementUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_peersrpc_peers_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeAnnouncementUpdateResponse.ProtoReflect.Descriptor instead.
func (*NodeAnnouncementUpdateResponse) Descriptor() ([]byte, []int) {
	return file_peersrpc_peers_proto_rawDescGZIP(), []int{3}
}

func (x *NodeAnnouncementUpdateResponse) GetOps() []*lnrpc.Op {
	if x != nil {
		return x.Ops
	}
	return nil
}

type NodeAnnouncement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signature []byte `protobuf:"bytes,1,opt,name=Signature,proto3" json:"Signature,omitempty"`
	Features  []byte `protobuf:"bytes,2,opt,name=Features,proto3" json:"Features,omitempty"`
	Timestamp uint32 `protobuf:"varint,3,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	NodeId    []byte `protobuf:"bytes,4,opt,name=NodeId,proto3" json:"NodeId,omitempty"`
	Alias     []byte `protobuf:"bytes,5,opt,name=Alias,proto3" json:"Alias,omitempty"`
}

func (x *NodeAnnouncement) Reset() {
	*x = NodeAnnouncement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peersrpc_peers_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeAnnouncement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeAnnouncement) ProtoMessage() {}

func (x *NodeAnnouncement) ProtoReflect() protoreflect.Message {
	mi := &file_peersrpc_peers_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeAnnouncement.ProtoReflect.Descriptor instead.
func (*NodeAnnouncement) Descriptor() ([]byte, []int) {
	return file_peersrpc_peers_proto_rawDescGZIP(), []int{4}
}

func (x *NodeAnnouncement) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *NodeAnnouncement) GetFeatures() []byte {
	if x != nil {
		return x.Features
	}
	return nil
}

func (x *NodeAnnouncement) GetTimestamp() uint32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *NodeAnnouncement) GetNodeId() []byte {
	if x != nil {
		return x.NodeId
	}
	return nil
}

func (x *NodeAnnouncement) GetAlias() []byte {
	if x != nil {
		return x.Alias
	}
	return nil
}

type ChannelUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signature       []byte `protobuf:"bytes,1,opt,name=Signature,proto3" json:"Signature,omitempty"`
	ChainHash       []byte `protobuf:"bytes,2,opt,name=ChainHash,proto3" json:"ChainHash,omitempty"`
	ChanId          uint64 `protobuf:"varint,3,opt,name=ChanId,proto3" json:"ChanId,omitempty"`
	Timestamp       uint64 `protobuf:"varint,4,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	MessageFlags    uint32 `protobuf:"varint,5,opt,name=MessageFlags,proto3" json:"MessageFlags,omitempty"`
	ChannelFlags    uint32 `protobuf:"varint,6,opt,name=ChannelFlags,proto3" json:"ChannelFlags,omitempty"`
	TimeLockDelta   uint32 `protobuf:"varint,7,opt,name=TimeLockDelta,proto3" json:"TimeLockDelta,omitempty"`
	BaseFee         uint32 `protobuf:"varint,8,opt,name=BaseFee,proto3" json:"BaseFee,omitempty"`
	FeeRate         uint32 `protobuf:"varint,9,opt,name=FeeRate,proto3" json:"FeeRate,omitempty"`
	HtlcMinimumMsat uint64 `protobuf:"varint,10,opt,name=HtlcMinimumMsat,proto3" json:"HtlcMinimumMsat,omitempty"`
	HtlcMaximumMsat uint64 `protobuf:"varint,11,opt,name=HtlcMaximumMsat,proto3" json:"HtlcMaximumMsat,omitempty"`
}

func (x *ChannelUpdate) Reset() {
	*x = ChannelUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peersrpc_peers_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelUpdate) ProtoMessage() {}

func (x *ChannelUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_peersrpc_peers_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelUpdate.ProtoReflect.Descriptor instead.
func (*ChannelUpdate) Descriptor() ([]byte, []int) {
	return file_peersrpc_peers_proto_rawDescGZIP(), []int{5}
}

func (x *ChannelUpdate) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *ChannelUpdate) GetChainHash() []byte {
	if x != nil {
		return x.ChainHash
	}
	return nil
}

func (x *ChannelUpdate) GetChanId() uint64 {
	if x != nil {
		return x.ChanId
	}
	return 0
}

func (x *ChannelUpdate) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *ChannelUpdate) GetMessageFlags() uint32 {
	if x != nil {
		return x.MessageFlags
	}
	return 0
}

func (x *ChannelUpdate) GetChannelFlags() uint32 {
	if x != nil {
		return x.ChannelFlags
	}
	return 0
}

func (x *ChannelUpdate) GetTimeLockDelta() uint32 {
	if x != nil {
		return x.TimeLockDelta
	}
	return 0
}

func (x *ChannelUpdate) GetBaseFee() uint32 {
	if x != nil {
		return x.BaseFee
	}
	return 0
}

func (x *ChannelUpdate) GetFeeRate() uint32 {
	if x != nil {
		return x.FeeRate
	}
	return 0
}

func (x *ChannelUpdate) GetHtlcMinimumMsat() uint64 {
	if x != nil {
		return x.HtlcMinimumMsat
	}
	return 0
}

func (x *ChannelUpdate) GetHtlcMaximumMsat() uint64 {
	if x != nil {
		return x.HtlcMaximumMsat
	}
	return 0
}

type ChannelAnnouncement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeSig1    []byte `protobuf:"bytes,1,opt,name=NodeSig1,proto3" json:"NodeSig1,omitempty"`
	NodeSig2    []byte `protobuf:"bytes,2,opt,name=NodeSig2,proto3" json:"NodeSig2,omitempty"`
	BitcoinSig1 []byte `protobuf:"bytes,3,opt,name=BitcoinSig1,proto3" json:"BitcoinSig1,omitempty"`
	BitcoinSig2 []byte `protobuf:"bytes,4,opt,name=BitcoinSig2,proto3" json:"BitcoinSig2,omitempty"`
	Features    []byte `protobuf:"bytes,5,opt,name=Features,proto3" json:"Features,omitempty"`
	ChainHash   []byte `protobuf:"bytes,6,opt,name=ChainHash,proto3" json:"ChainHash,omitempty"`
	ChanId      uint64 `protobuf:"varint,7,opt,name=ChanId,proto3" json:"ChanId,omitempty"`
	NodeId1     []byte `protobuf:"bytes,8,opt,name=NodeId1,proto3" json:"NodeId1,omitempty"`
	NodeId2     []byte `protobuf:"bytes,9,opt,name=NodeId2,proto3" json:"NodeId2,omitempty"`
	BitcoinKey1 []byte `protobuf:"bytes,10,opt,name=BitcoinKey1,proto3" json:"BitcoinKey1,omitempty"`
	BitcoinKey2 []byte `protobuf:"bytes,11,opt,name=BitcoinKey2,proto3" json:"BitcoinKey2,omitempty"`
}

func (x *ChannelAnnouncement) Reset() {
	*x = ChannelAnnouncement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peersrpc_peers_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelAnnouncement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelAnnouncement) ProtoMessage() {}

func (x *ChannelAnnouncement) ProtoReflect() protoreflect.Message {
	mi := &file_peersrpc_peers_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelAnnouncement.ProtoReflect.Descriptor instead.
func (*ChannelAnnouncement) Descriptor() ([]byte, []int) {
	return file_peersrpc_peers_proto_rawDescGZIP(), []int{6}
}

func (x *ChannelAnnouncement) GetNodeSig1() []byte {
	if x != nil {
		return x.NodeSig1
	}
	return nil
}

func (x *ChannelAnnouncement) GetNodeSig2() []byte {
	if x != nil {
		return x.NodeSig2
	}
	return nil
}

func (x *ChannelAnnouncement) GetBitcoinSig1() []byte {
	if x != nil {
		return x.BitcoinSig1
	}
	return nil
}

func (x *ChannelAnnouncement) GetBitcoinSig2() []byte {
	if x != nil {
		return x.BitcoinSig2
	}
	return nil
}

func (x *ChannelAnnouncement) GetFeatures() []byte {
	if x != nil {
		return x.Features
	}
	return nil
}

func (x *ChannelAnnouncement) GetChainHash() []byte {
	if x != nil {
		return x.ChainHash
	}
	return nil
}

func (x *ChannelAnnouncement) GetChanId() uint64 {
	if x != nil {
		return x.ChanId
	}
	return 0
}

func (x *ChannelAnnouncement) GetNodeId1() []byte {
	if x != nil {
		return x.NodeId1
	}
	return nil
}

func (x *ChannelAnnouncement) GetNodeId2() []byte {
	if x != nil {
		return x.NodeId2
	}
	return nil
}

func (x *ChannelAnnouncement) GetBitcoinKey1() []byte {
	if x != nil {
		return x.BitcoinKey1
	}
	return nil
}

func (x *ChannelAnnouncement) GetBitcoinKey2() []byte {
	if x != nil {
		return x.BitcoinKey2
	}
	return nil
}

type SendBatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeAnnouncements    []*NodeAnnouncement    `protobuf:"bytes,1,rep,name=nodeAnnouncements,proto3" json:"nodeAnnouncements,omitempty"`
	ChannelAnnouncements []*ChannelAnnouncement `protobuf:"bytes,2,rep,name=channelAnnouncements,proto3" json:"channelAnnouncements,omitempty"`
	ChannelUpdates       []*ChannelUpdate       `protobuf:"bytes,3,rep,name=channelUpdates,proto3" json:"channelUpdates,omitempty"`
}

func (x *SendBatchRequest) Reset() {
	*x = SendBatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peersrpc_peers_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendBatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendBatchRequest) ProtoMessage() {}

func (x *SendBatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_peersrpc_peers_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendBatchRequest.ProtoReflect.Descriptor instead.
func (*SendBatchRequest) Descriptor() ([]byte, []int) {
	return file_peersrpc_peers_proto_rawDescGZIP(), []int{7}
}

func (x *SendBatchRequest) GetNodeAnnouncements() []*NodeAnnouncement {
	if x != nil {
		return x.NodeAnnouncements
	}
	return nil
}

func (x *SendBatchRequest) GetChannelAnnouncements() []*ChannelAnnouncement {
	if x != nil {
		return x.ChannelAnnouncements
	}
	return nil
}

func (x *SendBatchRequest) GetChannelUpdates() []*ChannelUpdate {
	if x != nil {
		return x.ChannelUpdates
	}
	return nil
}

type SendBatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SendBatchResponse) Reset() {
	*x = SendBatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peersrpc_peers_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendBatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendBatchResponse) ProtoMessage() {}

func (x *SendBatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_peersrpc_peers_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendBatchResponse.ProtoReflect.Descriptor instead.
func (*SendBatchResponse) Descriptor() ([]byte, []int) {
	return file_peersrpc_peers_proto_rawDescGZIP(), []int{8}
}

var File_peersrpc_peers_proto protoreflect.FileDescriptor

var file_peersrpc_peers_proto_rawDesc = []byte{
	0x0a, 0x14, 0x70, 0x65, 0x65, 0x72, 0x73, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x70, 0x65, 0x65, 0x72, 0x73, 0x72, 0x70, 0x63,
	0x1a, 0x0f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x5f, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x73,
	0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x22, 0x79, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x65, 0x65, 0x72,
	0x73, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x0b, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x5f, 0x62, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11,
	0x2e, 0x6c, 0x6e, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x69,
	0x74, 0x52, 0x0a, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x69, 0x74, 0x22, 0xdb, 0x01,
	0x0a, 0x1d, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x46, 0x0a, 0x0f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x73,
	0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c,
	0x69, 0x61, 0x73, 0x12, 0x46, 0x0a, 0x0f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70,
	0x65, 0x65, 0x72, 0x73, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x3d, 0x0a, 0x1e, 0x4e,
	0x6f, 0x64, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a,
	0x03, 0x6f, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x6c, 0x6e, 0x72,
	0x70, 0x63, 0x2e, 0x4f, 0x70, 0x52, 0x03, 0x6f, 0x70, 0x73, 0x22, 0x98, 0x01, 0x0a, 0x10, 0x4e,
	0x6f, 0x64, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x08, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x4e, 0x6f, 0x64, 0x65, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x41, 0x6c, 0x69, 0x61, 0x73, 0x22, 0xf7, 0x02, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x48, 0x61,
	0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x68, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x43, 0x68, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x22, 0x0a,
	0x0c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x46, 0x6c, 0x61, 0x67,
	0x73, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x6c,
	0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x6f,
	0x63, 0x6b, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x61, 0x73, 0x65, 0x46,
	0x65, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x42, 0x61, 0x73, 0x65, 0x46, 0x65,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x48,
	0x74, 0x6c, 0x63, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x4d, 0x73, 0x61, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x48, 0x74, 0x6c, 0x63, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75,
	0x6d, 0x4d, 0x73, 0x61, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x48, 0x74, 0x6c, 0x63, 0x4d, 0x61, 0x78,
	0x69, 0x6d, 0x75, 0x6d, 0x4d, 0x73, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f,
	0x48, 0x74, 0x6c, 0x63, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x4d, 0x73, 0x61, 0x74, 0x22,
	0xdb, 0x02, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x6e, 0x6e, 0x6f, 0x75,
	0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x53,
	0x69, 0x67, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x53,
	0x69, 0x67, 0x31, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x69, 0x67, 0x32, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x69, 0x67, 0x32, 0x12,
	0x20, 0x0a, 0x0b, 0x42, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x53, 0x69, 0x67, 0x31, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x42, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x53, 0x69, 0x67,
	0x31, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x53, 0x69, 0x67, 0x32,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x42, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x53,
	0x69, 0x67, 0x32, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x16, 0x0a,
	0x06, 0x43, 0x68, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x43,
	0x68, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x31,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x31, 0x12,
	0x18, 0x0a, 0x07, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x32, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x32, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x69, 0x74,
	0x63, 0x6f, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x31, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b,
	0x42, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x31, 0x12, 0x20, 0x0a, 0x0b, 0x42,
	0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x32, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0b, 0x42, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x32, 0x22, 0xf0, 0x01,
	0x0a, 0x10, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x48, 0x0a, 0x11, 0x6e, 0x6f, 0x64, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x70, 0x65, 0x65, 0x72, 0x73, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x6e, 0x6e,
	0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x6e, 0x6f, 0x64, 0x65, 0x41,
	0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x51, 0x0a, 0x14,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x65, 0x65,
	0x72, 0x73, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x6e, 0x6e,
	0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x14, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x3f, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x73, 0x72,
	0x70, 0x63, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x22, 0x13, 0x0a, 0x11, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2a, 0x23, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x44, 0x44, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x10, 0x01, 0x2a, 0x69, 0x0a, 0x0a, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x74, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x45, 0x54, 0x5f,
	0x49, 0x4e, 0x49, 0x54, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x45, 0x54, 0x5f, 0x4c, 0x45,
	0x47, 0x41, 0x43, 0x59, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x10, 0x0a,
	0x0c, 0x53, 0x45, 0x54, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x4e, 0x4e, 0x10, 0x02, 0x12,
	0x0f, 0x0a, 0x0b, 0x53, 0x45, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x10, 0x03,
	0x12, 0x13, 0x0a, 0x0f, 0x53, 0x45, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f,
	0x41, 0x4d, 0x50, 0x10, 0x04, 0x32, 0xba, 0x01, 0x0a, 0x05, 0x50, 0x65, 0x65, 0x72, 0x73, 0x12,
	0x6b, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x6e, 0x6e,
	0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x2e, 0x70, 0x65, 0x65, 0x72,
	0x73, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x28, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x73, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x09,
	0x53, 0x65, 0x6e, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1a, 0x2e, 0x70, 0x65, 0x65, 0x72,
	0x73, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x73, 0x72, 0x70, 0x63,
	0x2e, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x30, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x69, 0x6e, 0x67, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2f, 0x6c, 0x6e, 0x64, 0x2f, 0x6c, 0x6e, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x65, 0x65, 0x72,
	0x73, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_peersrpc_peers_proto_rawDescOnce sync.Once
	file_peersrpc_peers_proto_rawDescData = file_peersrpc_peers_proto_rawDesc
)

func file_peersrpc_peers_proto_rawDescGZIP() []byte {
	file_peersrpc_peers_proto_rawDescOnce.Do(func() {
		file_peersrpc_peers_proto_rawDescData = protoimpl.X.CompressGZIP(file_peersrpc_peers_proto_rawDescData)
	})
	return file_peersrpc_peers_proto_rawDescData
}

var file_peersrpc_peers_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_peersrpc_peers_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_peersrpc_peers_proto_goTypes = []interface{}{
	(UpdateAction)(0),                      // 0: peersrpc.UpdateAction
	(FeatureSet)(0),                        // 1: peersrpc.FeatureSet
	(*UpdateAddressAction)(nil),            // 2: peersrpc.UpdateAddressAction
	(*UpdateFeatureAction)(nil),            // 3: peersrpc.UpdateFeatureAction
	(*NodeAnnouncementUpdateRequest)(nil),  // 4: peersrpc.NodeAnnouncementUpdateRequest
	(*NodeAnnouncementUpdateResponse)(nil), // 5: peersrpc.NodeAnnouncementUpdateResponse
	(*NodeAnnouncement)(nil),               // 6: peersrpc.NodeAnnouncement
	(*ChannelUpdate)(nil),                  // 7: peersrpc.ChannelUpdate
	(*ChannelAnnouncement)(nil),            // 8: peersrpc.ChannelAnnouncement
	(*SendBatchRequest)(nil),               // 9: peersrpc.SendBatchRequest
	(*SendBatchResponse)(nil),              // 10: peersrpc.SendBatchResponse
	(lnrpc.FeatureBit)(0),                  // 11: lnrpc.FeatureBit
	(*lnrpc.Op)(nil),                       // 12: lnrpc.Op
}
var file_peersrpc_peers_proto_depIdxs = []int32{
	0,  // 0: peersrpc.UpdateAddressAction.action:type_name -> peersrpc.UpdateAction
	0,  // 1: peersrpc.UpdateFeatureAction.action:type_name -> peersrpc.UpdateAction
	11, // 2: peersrpc.UpdateFeatureAction.feature_bit:type_name -> lnrpc.FeatureBit
	3,  // 3: peersrpc.NodeAnnouncementUpdateRequest.feature_updates:type_name -> peersrpc.UpdateFeatureAction
	2,  // 4: peersrpc.NodeAnnouncementUpdateRequest.address_updates:type_name -> peersrpc.UpdateAddressAction
	12, // 5: peersrpc.NodeAnnouncementUpdateResponse.ops:type_name -> lnrpc.Op
	6,  // 6: peersrpc.SendBatchRequest.nodeAnnouncements:type_name -> peersrpc.NodeAnnouncement
	8,  // 7: peersrpc.SendBatchRequest.channelAnnouncements:type_name -> peersrpc.ChannelAnnouncement
	7,  // 8: peersrpc.SendBatchRequest.channelUpdates:type_name -> peersrpc.ChannelUpdate
	4,  // 9: peersrpc.Peers.UpdateNodeAnnouncement:input_type -> peersrpc.NodeAnnouncementUpdateRequest
	9,  // 10: peersrpc.Peers.SendBatch:input_type -> peersrpc.SendBatchRequest
	5,  // 11: peersrpc.Peers.UpdateNodeAnnouncement:output_type -> peersrpc.NodeAnnouncementUpdateResponse
	10, // 12: peersrpc.Peers.SendBatch:output_type -> peersrpc.SendBatchResponse
	11, // [11:13] is the sub-list for method output_type
	9,  // [9:11] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_peersrpc_peers_proto_init() }
func file_peersrpc_peers_proto_init() {
	if File_peersrpc_peers_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_peersrpc_peers_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAddressAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peersrpc_peers_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFeatureAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peersrpc_peers_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeAnnouncementUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peersrpc_peers_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeAnnouncementUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peersrpc_peers_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeAnnouncement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peersrpc_peers_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peersrpc_peers_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelAnnouncement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peersrpc_peers_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendBatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peersrpc_peers_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendBatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_peersrpc_peers_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_peersrpc_peers_proto_goTypes,
		DependencyIndexes: file_peersrpc_peers_proto_depIdxs,
		EnumInfos:         file_peersrpc_peers_proto_enumTypes,
		MessageInfos:      file_peersrpc_peers_proto_msgTypes,
	}.Build()
	File_peersrpc_peers_proto = out.File
	file_peersrpc_peers_proto_rawDesc = nil
	file_peersrpc_peers_proto_goTypes = nil
	file_peersrpc_peers_proto_depIdxs = nil
}
